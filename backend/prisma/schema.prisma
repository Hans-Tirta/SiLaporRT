// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  phone       String?  @unique
  email       String?  @unique
  password    String?  
  googleId    String?  @unique

  role        Role     @default(CITIZEN)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reports         Report[]
  responses       Response[]
  reportComments  ReportComment[]
  reportUpvotes   ReportUpvote[]
  
  @@map("users")
}

enum Role {
  CITIZEN   // Warga biasa
  RT_ADMIN  // Admin RT - yang bisa memberikan response resmi
}

model Report {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  category    ReportCategory
  status      ReportStatus  @default(PENDING)
  
  isAnonymous Boolean       @default(false) // Apakah nama pelapor disembunyikan
  isPublic    Boolean       @default(true)  // Apakah ditampilkan di menu laporan publik
  
  upvoteCount   Int         @default(0)     // Cache jumlah upvote
  commentCount  Int         @default(0)     // Cache jumlah comment
  
  location    Location      @relation(fields: [locationId], references: [id])
  locationId  String        
  
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  
  attachments     Attachment[]
  
  responses       Response[]
  
  reportComments  ReportComment[]
  reportUpvotes   ReportUpvote[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("reports")
}

enum ReportCategory {
  INFRASTRUCTURE  // Jalan rusak, got mampet
  CLEANLINESS    // Sampah, kebersihan  
  LIGHTING       // Lampu jalan mati
  SECURITY       // Keamanan lingkungan
  UTILITIES      // Air, listrik
  ENVIRONMENT    // Pohon tumbang, banjir
  ANNOUNCEMENT   // Pengumuman dari RT (sticky posts)
  SUGGESTION     // Saran untuk perbaikan lingkungan
  EVENT          // Info kegiatan warga (gotong royong, dll)
  OTHER          // Lainnya
}

enum ReportStatus {
  PENDING      
  IN_PROGRESS  
  RESOLVED     
  REJECTED     
  CLOSED       
}

// Response resmi hanya dari RT Admin
model Response {
  id          String       @id @default(cuid())
  message     String       @db.Text
  attachments Attachment[] // RT bisa attach foto progress, dll
  
  report      Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId    String
  
  // Hanya RT_ADMIN yang bisa buat response
  responder   User         @relation(fields: [responderId], references: [id])
  responderId String
  
  createdAt   DateTime     @default(now())
  
  @@map("responses")
}

// Comment/diskusi warga di laporan
model ReportComment {
  id       String @id @default(cuid())
  content  String @db.Text
  
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  
  createdAt DateTime @default(now())
  
  @@map("report_comments")
}

model ReportUpvote {
  id       String @id @default(cuid())
  
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  
  createdAt DateTime @default(now())
  
  // Satu user hanya bisa upvote sekali per laporan
  @@unique([reportId, userId])
  @@map("report_upvotes")
}

model Location {
  id        String @id @default(cuid())
  latitude  Float
  longitude Float
  address   String
  
  // Administrative
  rt        String
  rw        String
  kelurahan String?
  kecamatan String?
  
  report    Report[]
  
  @@map("locations")
}

model Attachment {
  id       String @id @default(cuid())
  filename String
  url      String
  fileType String // image, video, document
  
  // Relations (bisa attach ke Report atau Response)
  report     Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId   String?
  response   Response? @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String?
  
  createdAt DateTime @default(now())
  
  @@map("attachments")
}
